{"version":3,"sources":["context/appReducer.ts","context/globalState.tsx","component/addTransaction.tsx","component/Ammount.tsx","component/IncomeExpense.tsx","component/Transaction.tsx","component/TransactionHistory.tsx","firebase.ts","App.tsx","serviceWorker.ts","index.tsx","swDev.js"],"names":["AppReducer","state","action","type","transaction","filter","transactions","id","payload","initialState","text","ammount","GlobalContext","createContext","GlobalProvider","children","useReducer","dispatch","Provider","value","deleteTransaction","addTransaction","AddTransaction","useState","setText","setAmmount","useContext","onSubmit","e","preventDefault","newTransaction","Math","floor","random","className","htmlFor","onChange","target","placeholder","Ammount","total","map","trans","reduce","acc","item","toFixed","IncomeExpense","ammounts","income","expence","Transaction","sign","abs","onClick","TransactionHistory","key","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","messaging","requestPermission","then","getToken","token","console","log","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","swDev","process","result","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a13d4f1f.chunk.js","sourcesContent":["import { transactionType, actionType } from \"./Typeo\";\n\nexport const AppReducer = (state: transactionType, action: actionType) => {\n  switch (action.type) {\n    case \"DELETE_TRANSACTION\":\n      return {\n        ...state,\n\n        transaction: state.transaction.filter(\n          (transactions: any) => transactions.id !== action.payload\n        ),\n      };\n    case \"ADD_TRANSACTION\":\n      return {\n        ...state,\n        transaction: [action.payload, ...state.transaction],\n      };\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer } from \"react\";\nimport { AppReducer } from \"./appReducer\";\nimport { transType, transactionType, contextProps } from \"./Typeo\";\n\nconst initialState: transactionType = {\n  transaction: [{ id: 1, text: \"Bilal\", ammount: 40 }],\n};\n\nexport const GlobalContext = createContext<Partial<contextProps>>({});\n\nexport const GlobalProvider = ({ children }: any) => {\n  let [state, dispatch] = useReducer(AppReducer, initialState);\n\n  let deleteTransaction = (id: number) => {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id,\n    });\n  };\n  let addTransaction = (transaction: transType) => {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction,\n    });\n  };\n  return (\n    <GlobalContext.Provider\n      value={{\n        transaction: state.transaction,\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { GlobalContext } from \"../context/globalState\";\n\nimport \"./component.css\";\n\nexport const AddTransaction = () => {\n  let [text, setText] = useState<string>(\"\");\n  let [ammount, setAmmount] = useState<number>(0);\n\n  let { addTransaction }: any = useContext(GlobalContext);\n\n  const onSubmit = (e: any) => {\n    e.preventDefault();\n\n    const newTransaction = {\n      id: Math.floor(Math.random() * 10000000),\n      text,\n      ammount: +ammount,\n    };\n    addTransaction(newTransaction);\n  };\n  return (\n    <div>\n      <h3>Add new Transaction</h3>\n      <form id=\"form\" onSubmit={onSubmit}>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Text</label>\n          <input\n            id=\"text\"\n            type=\"text\"\n            value={text}\n            onChange={(e: any) => setText(e.target.value)}\n            placeholder=\"Enter Text...\"\n          />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"ammount\">\n            Ammout <br />\n            (negative - expense, positive - income)\n          </label>\n          <input\n            id=\"amount\"\n            type=\"number\"\n            value={ammount}\n            onChange={(e: any) => setAmmount(e.target.value)}\n            placeholder=\"Enter ammount...\"\n          />\n        </div>\n        <button className=\"btn\">Add Transaction</button>\n      </form>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/globalState\";\nimport { transType } from \"../context/Typeo\";\nimport \"./component.css\";\n\nexport const Ammount = () => {\n  const { transaction }: any = useContext(GlobalContext);\n  const amounts = transaction.map(\n    (trans: transType, id: number) => trans.ammount\n  );\n  const total = amounts\n    .reduce((acc: any, item: any) => (acc += item), 0)\n    .toFixed(2);\n  return (\n    <div>\n      <h4>Your Balance</h4>\n      <h1> ${total} </h1>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/globalState\";\nimport { transType } from \"../context/Typeo\";\nimport \"./component.css\";\n\nexport const IncomeExpense = () => {\n  const { transaction }: any = useContext(GlobalContext);\n\n  const ammounts = transaction.map(\n    (transactions: transType) => transactions.ammount\n  );\n  const income = ammounts\n    .filter((item: any) => item > 0)\n    .reduce((acc: any, item: any) => (acc += item), 0)\n    .toFixed(2);\n\n  const expence = (\n    ammounts\n      .filter((item: any) => item < 0)\n      .reduce((acc: any, item: any) => (acc += item), 0) * -1\n  ).toFixed(2);\n  return (\n    <div className=\"inc-exp-container\">\n      <div>\n        <h4>Income</h4>\n        <p className=\"money plus\">{income}</p>\n      </div>\n      <div>\n        <h4>Expence</h4>\n        <p className=\"money minus\">{expence}</p>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/globalState\";\nimport \"./component.css\";\n\nexport const Transaction = ({ transactions }: any) => {\n  let { deleteTransaction }: any = useContext(GlobalContext);\n  let sign: any = transactions.ammount < 0 ? \"-\" : \"+\";\n  return (\n    <li className={transactions.ammount < 0 ? \"minus\" : \"plus\"}>\n      {transactions.text}{\" \"}\n      <span>\n        {sign}${Math.abs(transactions.ammount)}\n      </span>\n      <button\n        className=\"btn-delete\"\n        onClick={() => deleteTransaction(transactions.id)}\n      >\n        x\n      </button>\n    </li>\n  );\n};\n","import React, { useContext, Fragment } from \"react\";\nimport { GlobalContext } from \"../context/globalState\";\nimport { Transaction } from \"./Transaction\";\nimport { transType } from \"../context/Typeo\";\n\nexport const TransactionHistory = () => {\n  let { transaction }: any = useContext(GlobalContext);\n  return (\n    <Fragment>\n      <h3>History</h3>\n      <ul className=\"list\">\n        {\" \"}\n        {transaction.map((transaction: transType, id: number) => (\n          <Transaction key={transaction.id} transactions={transaction} />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n","import * as firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport { configFirebase } from \"./context/Typeo\";\n\nconst config: configFirebase = {\n  apiKey: \"AIzaSyDI1m36PnfS-rCYb5T34GTUuBAtPV6U7sk\",\n  authDomain: \"expense-tracker-app-pwa.firebaseapp.com\",\n  databaseURL: \"https://expense-tracker-app-pwa.firebaseio.com\",\n  projectId: \"expense-tracker-app-pwa\",\n  storageBucket: \"expense-tracker-app-pwa.appspot.com\",\n  messagingSenderId: \"858359331296\",\n  appId: \"1:858359331296:web:249fe4c1dca3dfe89fd385\",\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React from \"react\";\nimport \"./component/component.css\";\nimport { AddTransaction } from \"./component/addTransaction\";\nimport { Ammount } from \"./component/Ammount\";\nimport { IncomeExpense } from \"./component/IncomeExpense\";\nimport { TransactionHistory } from \"./component/TransactionHistory\";\nimport firebase from \"./firebase\";\nimport { GlobalProvider } from \"./context/globalState\";\n\nfunction App() {\n  const messaging = firebase.messaging();\n  messaging\n    .requestPermission()\n    .then(() => {\n      return messaging.getToken();\n    })\n    .then((token) => {\n      console.log(\"token\", token);\n    });\n  return (\n    <GlobalProvider>\n      <h3>Expense Tracker App </h3>\n\n      <div className=\"container\">\n        <Ammount />\n        <IncomeExpense />\n        <TransactionHistory />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { swDev } from \"./swDev\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nswDev();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const swDev = () => {\n  let swDev = `${process.env.PUBLIC_URL}/sw.js`;\n  navigator.serviceWorker.register(swDev).then((result) => {\n    console.log(result, \"result\");\n  });\n};\n"],"sourceRoot":""}